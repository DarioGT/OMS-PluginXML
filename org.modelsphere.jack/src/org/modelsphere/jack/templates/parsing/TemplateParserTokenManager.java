/* Generated By:JavaCC: Do not edit this line. TemplateParserTokenManager.java */
package org.modelsphere.jack.templates.parsing;

import org.modelsphere.jack.srtool.forward.CharacterDomain;
import org.modelsphere.jack.srtool.forward.BooleanModifier;
import org.modelsphere.jack.srtool.forward.IntegerModifier;
import org.modelsphere.jack.templates.TemplateActions;

public class TemplateParserTokenManager implements TemplateParserConstants {
    public static java.io.PrintStream debugStream = System.out;

    public static void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
        case 0:
            if ((active0 & 0xfffffffffff80000L) != 0L || (active1 & 0x1fffffffffffL) != 0L)
                return 28;
            return -1;
        case 1:
            if ((active0 & 0x879fffbfeff80000L) != 0L || (active1 & 0x1fffe0ffe7fcL) != 0L) {
                if (jjmatchedPos != 1) {
                    jjmatchedKind = 109;
                    jjmatchedPos = 1;
                }
                return 28;
            }
            if ((active0 & 0x7860004010000000L) != 0L || (active1 & 0x1f001803L) != 0L)
                return 28;
            return -1;
        case 2:
            if ((active0 & 0x8018a2000000L) != 0L || (active1 & 0xc84080L) != 0L)
                return 28;
            if ((active0 & 0xd7df7fa75df80000L) != 0L || (active1 & 0x1ffffe37b77eL) != 0L) {
                if (jjmatchedPos != 2) {
                    jjmatchedKind = 109;
                    jjmatchedPos = 2;
                }
                return 28;
            }
            return -1;
        case 3:
            if ((active0 & 0x1210002008e80000L) != 0L || (active1 & 0x1ffc2085a110L) != 0L)
                return 28;
            if ((active0 & 0xc5cf7f8755100000L) != 0L || (active1 & 0x3de32166eL) != 0L) {
                if (jjmatchedPos != 3) {
                    jjmatchedKind = 109;
                    jjmatchedPos = 3;
                }
                return 28;
            }
            return -1;
        case 4:
            if ((active0 & 0x100118204000000L) != 0L || (active1 & 0x100031020L) != 0L)
                return 28;
            if ((active0 & 0xc4cf6e0551100000L) != 0L || (active1 & 0x2de30064eL) != 0L) {
                jjmatchedKind = 109;
                jjmatchedPos = 4;
                return 28;
            }
            return -1;
        case 5:
            if ((active0 & 0x444a2e0411100000L) != 0L || (active1 & 0x25e300442L) != 0L) {
                jjmatchedKind = 109;
                jjmatchedPos = 5;
                return 28;
            }
            if ((active0 & 0x8085400140000000L) != 0L || (active1 & 0x8000020cL) != 0L)
                return 28;
            return -1;
        case 6:
            if ((active0 & 0x4482a0010100000L) != 0L || (active1 & 0x4000000L) != 0L)
                return 28;
            if ((active0 & 0x4002040401000000L) != 0L || (active1 & 0x25a300442L) != 0L) {
                jjmatchedKind = 109;
                jjmatchedPos = 6;
                return 28;
            }
            return -1;
        case 7:
            if ((active0 & 0x40401000000L) != 0L || (active1 & 0x210000040L) != 0L)
                return 28;
            if ((active0 & 0x4002000000000000L) != 0L || (active1 & 0x4a300402L) != 0L) {
                jjmatchedKind = 109;
                jjmatchedPos = 7;
                return 28;
            }
            return -1;
        case 8:
            if ((active0 & 0x4002000000000000L) != 0L || (active1 & 0x40100402L) != 0L) {
                jjmatchedKind = 109;
                jjmatchedPos = 8;
                return 28;
            }
            if ((active1 & 0xa200000L) != 0L)
                return 28;
            return -1;
        case 9:
            if ((active0 & 0x4002000000000000L) != 0L || (active1 & 0x40100002L) != 0L)
                return 28;
            if ((active1 & 0x400L) != 0L) {
                jjmatchedKind = 109;
                jjmatchedPos = 9;
                return 28;
            }
            return -1;
        case 10:
            if ((active1 & 0x400L) != 0L) {
                jjmatchedKind = 109;
                jjmatchedPos = 10;
                return 28;
            }
            return -1;
        default:
            return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    static private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
        case 40:
            return jjStopAtPos(0, 114);
        case 41:
            return jjStopAtPos(0, 116);
        case 42:
            return jjStopAtPos(0, 119);
        case 43:
            return jjStopAtPos(0, 117);
        case 44:
            return jjStopAtPos(0, 115);
        case 45:
            return jjStopAtPos(0, 118);
        case 47:
            jjmatchedKind = 120;
            return jjMoveStringLiteralDfa1_0(0xc0L, 0x0L);
        case 59:
            return jjStopAtPos(0, 113);
        case 60:
            return jjStopAtPos(0, 122);
        case 61:
            jjmatchedKind = 112;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L);
        case 62:
            return jjStopAtPos(0, 121);
        case 65:
            return jjMoveStringLiteralDfa1_0(0x1800080000L, 0x0L);
        case 66:
            return jjMoveStringLiteralDfa1_0(0x6000100000L, 0x0L);
        case 67:
            return jjMoveStringLiteralDfa1_0(0x78000e00000L, 0x0L);
        case 68:
            return jjMoveStringLiteralDfa1_0(0x3f80000000000L, 0x0L);
        case 69:
            return jjMoveStringLiteralDfa1_0(0xfc000000000000L, 0x0L);
        case 70:
            return jjMoveStringLiteralDfa1_0(0x1f00000001000000L, 0x0L);
        case 71:
            return jjMoveStringLiteralDfa1_0(0x6000000L, 0x0L);
        case 73:
            return jjMoveStringLiteralDfa1_0(0xe000000018000000L, 0x3L);
        case 76:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x3cL);
        case 77:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
        case 78:
            return jjMoveStringLiteralDfa1_0(0x20000000L, 0x380L);
        case 79:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x1c00L);
        case 80:
            return jjMoveStringLiteralDfa1_0(0x40000000L, 0x1e000L);
        case 81:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
        case 82:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
        case 83:
            return jjMoveStringLiteralDfa1_0(0x180000000L, 0xf80000L);
        case 84:
            return jjMoveStringLiteralDfa1_0(0x200000000L, 0x3f000000L);
        case 85:
            return jjMoveStringLiteralDfa1_0(0x400000000L, 0x1c0000000L);
        case 86:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x1ffa00000000L);
        case 87:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
        default:
            return jjMoveNfa_0(0, 0);
        }
    }

    static private final int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
        case 42:
            if ((active0 & 0x80L) != 0L)
                return jjStopAtPos(1, 7);
            break;
        case 47:
            if ((active0 & 0x40L) != 0L)
                return jjStopAtPos(1, 6);
            break;
        case 61:
            if ((active1 & 0x800000000000000L) != 0L)
                return jjStopAtPos(1, 123);
            break;
        case 65:
            return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x1ffa00002000L);
        case 68:
            return jjMoveStringLiteralDfa2_0(active0, 0x808200000L, active1, 0L);
        case 69:
            return jjMoveStringLiteralDfa2_0(active0, 0x802a2000000L, active1, 0x8400cL);
        case 70:
            if ((active0 & 0x2000000000000000L) != 0L) {
                jjmatchedKind = 61;
                jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
        case 72:
            return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x400000000L);
        case 73:
            return jjMoveStringLiteralDfa2_0(active0, 0x204700000000000L, active1, 0x10L);
        case 76:
            return jjMoveStringLiteralDfa2_0(active0, 0x18010040000000L, active1, 0L);
        case 77:
            return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
        case 78:
            if ((active0 & 0x20000000000000L) != 0L) {
                jjmatchedKind = 53;
                jjmatchedPos = 1;
            } else if ((active1 & 0x1L) != 0L) {
                jjmatchedKind = 64;
                jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0x40001010000000L, active1, 0xc0000402L);
        case 79:
            if ((active1 & 0x1000000L) != 0L) {
                jjmatchedKind = 88;
                jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0x400862000d00000L, active1, 0x1e0002a0L);
        case 80:
            return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
        case 81:
            return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
        case 82:
            if ((active0 & 0x800000000000000L) != 0L) {
                jjmatchedKind = 59;
                jjmatchedPos = 1;
            } else if ((active1 & 0x800L) != 0L) {
                jjmatchedKind = 75;
                jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0x1000000004000000L, active1, 0x20019000L);
        case 83:
            return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
        case 84:
            return jjMoveStringLiteralDfa2_0(active0, 0x100080000L, active1, 0x100000L);
        case 85:
            return jjMoveStringLiteralDfa2_0(active0, 0x2000001000000L, active1, 0xe60140L);
        case 88:
            return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
        case 89:
            if ((active0 & 0x4000000000L) != 0L)
                return jjStartNfaWithStates_0(1, 38, 28);
            break;
        default:
            break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(0, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x100000L);
        case 66:
            return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2200000L);
        case 67:
            return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
        case 68:
            if ((active0 & 0x800000000L) != 0L)
                return jjStartNfaWithStates_0(2, 35, 28);
            else if ((active0 & 0x1000000000L) != 0L)
                return jjStartNfaWithStates_0(2, 36, 28);
            return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40001000L);
        case 69:
            return jjMoveStringLiteralDfa3_0(active0, 0x8010400000000L, active1, 0x400018000L);
        case 70:
            if ((active1 & 0x400000L) != 0L) {
                jjmatchedKind = 86;
                jjmatchedPos = 2;
            }
            return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x4800000L);
        case 71:
            return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
        case 73:
            return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x88000000L);
        case 76:
            return jjMoveStringLiteralDfa3_0(active0, 0x300000000000000L, active1, 0x40540L);
        case 77:
            if ((active0 & 0x800000000000L) != 0L)
                return jjStartNfaWithStates_0(2, 47, 28);
            return jjMoveStringLiteralDfa3_0(active0, 0x20200000000L, active1, 0L);
        case 78:
            return jjMoveStringLiteralDfa3_0(active0, 0x40001c00000L, active1, 0x4L);
        case 79:
            return jjMoveStringLiteralDfa3_0(active0, 0x500000000c300000L, active1, 0x20000L);
        case 80:
            if ((active1 & 0x80000L) != 0L)
                return jjStartNfaWithStates_0(2, 83, 28);
            return jjMoveStringLiteralDfa3_0(active0, 0x8002000000000000L, active1, 0x100000000L);
        case 82:
            if ((active1 & 0x4000L) != 0L)
                return jjStartNfaWithStates_0(2, 78, 28);
            return jjMoveStringLiteralDfa3_0(active0, 0x400000100000000L, active1, 0x1ffa00002000L);
        case 83:
            return jjMoveStringLiteralDfa3_0(active0, 0x10200000000000L, active1, 0x10000012L);
        case 84:
            if ((active0 & 0x2000000L) != 0L)
                return jjStartNfaWithStates_0(2, 25, 28);
            else if ((active0 & 0x80000000L) != 0L)
                return jjStartNfaWithStates_0(2, 31, 28);
            else if ((active1 & 0x80L) != 0L)
                return jjStartNfaWithStates_0(2, 71, 28);
            return jjMoveStringLiteralDfa3_0(active0, 0x84002010080000L, active1, 0x8L);
        case 85:
            return jjMoveStringLiteralDfa3_0(active0, 0x1000040000000L, active1, 0x20000000L);
        case 86:
            return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
        case 87:
            if ((active0 & 0x20000000L) != 0L)
                return jjStartNfaWithStates_0(2, 29, 28);
            return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
        default:
            break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(1, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
        case 48:
            if ((active1 & 0x800000000L) != 0L)
                return jjStartNfaWithStates_0(3, 99, 28);
            break;
        case 49:
            if ((active1 & 0x800000L) != 0L)
                return jjStartNfaWithStates_0(3, 87, 28);
            else if ((active1 & 0x1000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 100, 28);
            break;
        case 50:
            if ((active1 & 0x2000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 101, 28);
            break;
        case 51:
            if ((active1 & 0x4000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 102, 28);
            break;
        case 52:
            if ((active1 & 0x8000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 103, 28);
            break;
        case 53:
            if ((active1 & 0x10000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 104, 28);
            break;
        case 54:
            if ((active1 & 0x20000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 105, 28);
            break;
        case 55:
            if ((active1 & 0x40000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 106, 28);
            break;
        case 56:
            if ((active1 & 0x80000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 107, 28);
            break;
        case 57:
            if ((active1 & 0x100000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 108, 28);
            break;
        case 65:
            return jjMoveStringLiteralDfa4_0(active0, 0x90000000000L, active1, 0x200L);
        case 66:
            return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
        case 67:
            return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
        case 68:
            if ((active0 & 0x400000L) != 0L)
                return jjStartNfaWithStates_0(3, 22, 28);
            break;
        case 69:
            if ((active0 & 0x10000000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 52, 28);
            else if ((active0 & 0x200000000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 57, 28);
            else if ((active1 & 0x40000L) != 0L)
                return jjStartNfaWithStates_0(3, 82, 28);
            else if ((active1 & 0x20000000L) != 0L)
                return jjStartNfaWithStates_0(3, 93, 28);
            return jjMoveStringLiteralDfa4_0(active0, 0x480000010000000L, active1, 0x140001020L);
        case 70:
            if ((active1 & 0x8000L) != 0L) {
                jjmatchedKind = 79;
                jjmatchedPos = 3;
            }
            return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L);
        case 71:
            return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x4L);
        case 72:
            if ((active0 & 0x2000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 37, 28);
            return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
        case 73:
            return jjMoveStringLiteralDfa4_0(active0, 0x500100000000L, active1, 0x200000000L);
        case 76:
            if ((active1 & 0x100L) != 0L)
                return jjStartNfaWithStates_0(3, 72, 28);
            return jjMoveStringLiteralDfa4_0(active0, 0x2008000100000L, active1, 0x4000000L);
        case 77:
            if ((active0 & 0x200000L) != 0L)
                return jjStartNfaWithStates_0(3, 21, 28);
            else if ((active0 & 0x8000000L) != 0L)
                return jjStartNfaWithStates_0(3, 27, 28);
            else if ((active0 & 0x1000000000000000L) != 0L)
                return jjStartNfaWithStates_0(3, 60, 28);
            else if ((active1 & 0x2000L) != 0L)
                return jjStartNfaWithStates_0(3, 77, 28);
            return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
        case 78:
            if ((active0 & 0x800000L) != 0L)
                return jjStartNfaWithStates_0(3, 23, 28);
            else if ((active1 & 0x400000000L) != 0L)
                return jjStartNfaWithStates_0(3, 98, 28);
            return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x8000000L);
        case 79:
            return jjMoveStringLiteralDfa4_0(active0, 0x8001000000000000L, active1, 0x2000000L);
        case 80:
            return jjMoveStringLiteralDfa4_0(active0, 0x220200000000L, active1, 0L);
        case 81:
            return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L);
        case 82:
            if ((active0 & 0x80000L) != 0L)
                return jjStartNfaWithStates_0(3, 19, 28);
            return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x100000L);
        case 83:
            return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x200000L);
        case 84:
            if ((active1 & 0x10L) != 0L)
                return jjStartNfaWithStates_0(3, 68, 28);
            return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x1002004aL);
        case 85:
            return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
        case 89:
            return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
        default:
            break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(2, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1);
            return 4;
        }
        switch (curChar) {
        case 49:
            if ((active1 & 0x10000L) != 0L)
                return jjStartNfaWithStates_0(4, 80, 28);
            break;
        case 65:
            return jjMoveStringLiteralDfa5_0(active0, 0x400040000000000L, active1, 0x200000002L);
        case 67:
            return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x400L);
        case 68:
            if ((active0 & 0x8000000000L) != 0L)
                return jjStartNfaWithStates_0(4, 39, 28);
            return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
        case 69:
            if ((active0 & 0x100000000000000L) != 0L)
                return jjStartNfaWithStates_0(4, 56, 28);
            else if ((active1 & 0x20000L) != 0L)
                return jjStartNfaWithStates_0(4, 81, 28);
            return jjMoveStringLiteralDfa5_0(active0, 0x400c000000100000L, active1, 0x8L);
        case 71:
            return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
        case 73:
            return jjMoveStringLiteralDfa5_0(active0, 0x2000040000000L, active1, 0x40L);
        case 76:
            if ((active0 & 0x200000000L) != 0L)
                return jjStartNfaWithStates_0(4, 33, 28);
            return jjMoveStringLiteralDfa5_0(active0, 0x40200000000000L, active1, 0L);
        case 78:
            return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
        case 79:
            return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000000L);
        case 80:
            if ((active0 & 0x4000000L) != 0L)
                return jjStartNfaWithStates_0(4, 26, 28);
            break;
        case 82:
            if ((active0 & 0x10000000000L) != 0L)
                return jjStartNfaWithStates_0(4, 40, 28);
            else if ((active1 & 0x20L) != 0L)
                return jjStartNfaWithStates_0(4, 69, 28);
            else if ((active1 & 0x1000L) != 0L)
                return jjStartNfaWithStates_0(4, 76, 28);
            else if ((active1 & 0x100000000L) != 0L)
                return jjStartNfaWithStates_0(4, 96, 28);
            return jjMoveStringLiteralDfa5_0(active0, 0x8080000000000000L, active1, 0x50000000L);
        case 83:
            return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
        case 84:
            if ((active0 & 0x100000000000L) != 0L)
                return jjStartNfaWithStates_0(4, 44, 28);
            return jjMoveStringLiteralDfa5_0(active0, 0x1000001000000L, active1, 0x8300004L);
        case 85:
            return jjMoveStringLiteralDfa5_0(active0, 0xa0000000000L, active1, 0x80000000L);
        default:
            break;
        }
        return jjStartNfa_0(3, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(3, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1);
            return 5;
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa6_0(active0, 0x200000100000L, active1, 0x4000000L);
        case 66:
            return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L);
        case 67:
            return jjMoveStringLiteralDfa6_0(active0, 0x4402000000000000L, active1, 0L);
        case 69:
            if ((active0 & 0x400000000000L) != 0L)
                return jjStartNfaWithStates_0(5, 46, 28);
            else if ((active0 & 0x1000000000000L) != 0L)
                return jjStartNfaWithStates_0(5, 48, 28);
            else if ((active1 & 0x200L) != 0L)
                return jjStartNfaWithStates_0(5, 73, 28);
            else if ((active1 & 0x80000000L) != 0L)
                return jjStartNfaWithStates_0(5, 95, 28);
            return jjMoveStringLiteralDfa6_0(active0, 0x40000010000000L, active1, 0x8000000L);
        case 71:
            if ((active0 & 0x100000000L) != 0L)
                return jjStartNfaWithStates_0(5, 32, 28);
            break;
        case 72:
            if ((active1 & 0x4L) != 0L)
                return jjStartNfaWithStates_0(5, 66, 28);
            break;
        case 73:
            return jjMoveStringLiteralDfa6_0(active0, 0x40001000000L, active1, 0x10000000L);
        case 76:
            return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x2000000L);
        case 78:
            if ((active0 & 0x40000000L) != 0L)
                return jjStartNfaWithStates_0(5, 30, 28);
            else if ((active0 & 0x80000000000000L) != 0L)
                return jjStartNfaWithStates_0(5, 55, 28);
            return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x2L);
        case 79:
            return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x400L);
        case 80:
            return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
        case 82:
            if ((active0 & 0x4000000000000L) != 0L)
                return jjStartNfaWithStates_0(5, 50, 28);
            else if ((active1 & 0x8L) != 0L)
                return jjStartNfaWithStates_0(5, 67, 28);
            return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L);
        case 83:
            return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40100000L);
        case 84:
            if ((active0 & 0x8000000000000000L) != 0L)
                return jjStartNfaWithStates_0(5, 63, 28);
            return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
        default:
            break;
        }
        return jjStartNfa_0(4, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(4, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1);
            return 6;
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0x200000L);
        case 67:
            return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000002L);
        case 68:
            if ((active0 & 0x40000000000000L) != 0L)
                return jjStartNfaWithStates_0(6, 54, 28);
            break;
        case 69:
            if ((active0 & 0x20000000000L) != 0L)
                return jjStartNfaWithStates_0(6, 41, 28);
            return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
        case 71:
            return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L);
        case 72:
            if ((active0 & 0x400000000000000L) != 0L)
                return jjStartNfaWithStates_0(6, 58, 28);
            return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
        case 76:
            return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000040L);
        case 78:
            if ((active0 & 0x100000L) != 0L)
                return jjStartNfaWithStates_0(6, 20, 28);
            return jjMoveStringLiteralDfa7_0(active0, 0x40400000000L, active1, 0x10000400L);
        case 79:
            return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
        case 82:
            if ((active0 & 0x10000000L) != 0L)
                return jjStartNfaWithStates_0(6, 28, 28);
            break;
        case 84:
            if ((active0 & 0x80000000000L) != 0L)
                return jjStartNfaWithStates_0(6, 43, 28);
            else if ((active0 & 0x8000000000000L) != 0L)
                return jjStartNfaWithStates_0(6, 51, 28);
            else if ((active1 & 0x4000000L) != 0L)
                return jjStartNfaWithStates_0(6, 90, 28);
            break;
        case 87:
            return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
        case 89:
            if ((active0 & 0x200000000000L) != 0L)
                return jjStartNfaWithStates_0(6, 45, 28);
            break;
        default:
            break;
        }
        return jjStartNfa_0(5, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(5, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1);
            return 7;
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L);
        case 67:
            return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
        case 69:
            if ((active1 & 0x200000000L) != 0L)
                return jjStartNfaWithStates_0(7, 97, 28);
            return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000002L);
        case 71:
            if ((active1 & 0x10000000L) != 0L)
                return jjStartNfaWithStates_0(7, 92, 28);
            break;
        case 73:
            return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0x100000L);
        case 78:
            if ((active0 & 0x1000000L) != 0L)
                return jjStartNfaWithStates_0(7, 24, 28);
            else if ((active0 & 0x400000000L) != 0L)
                return jjStartNfaWithStates_0(7, 34, 28);
            break;
        case 79:
            return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L);
        case 83:
            if ((active0 & 0x40000000000L) != 0L)
                return jjStartNfaWithStates_0(7, 42, 28);
            break;
        case 84:
            return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0x400L);
        case 89:
            if ((active1 & 0x40L) != 0L)
                return jjStartNfaWithStates_0(7, 70, 28);
            break;
        default:
            break;
        }
        return jjStartNfa_0(6, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(6, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1);
            return 8;
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L);
        case 69:
            return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
        case 76:
            return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
        case 78:
            if ((active1 & 0x2000000L) != 0L)
                return jjStartNfaWithStates_0(8, 89, 28);
            break;
        case 79:
            return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
        case 82:
            if ((active1 & 0x8000000L) != 0L)
                return jjStartNfaWithStates_0(8, 91, 28);
            return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L);
        case 84:
            if ((active1 & 0x200000L) != 0L)
                return jjStartNfaWithStates_0(8, 85, 28);
            return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L);
        default:
            break;
        }
        return jjStartNfa_0(7, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(7, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, active1);
            return 9;
        }
        switch (curChar) {
        case 68:
            if ((active0 & 0x2000000000000L) != 0L)
                return jjStartNfaWithStates_0(9, 49, 28);
            else if ((active0 & 0x4000000000000000L) != 0L)
                return jjStartNfaWithStates_0(9, 62, 28);
            break;
        case 69:
            if ((active1 & 0x40000000L) != 0L)
                return jjStartNfaWithStates_0(9, 94, 28);
            break;
        case 70:
            if ((active1 & 0x2L) != 0L)
                return jjStartNfaWithStates_0(9, 65, 28);
            break;
        case 72:
            if ((active1 & 0x100000L) != 0L)
                return jjStartNfaWithStates_0(9, 84, 28);
            break;
        case 73:
            return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
        default:
            break;
        }
        return jjStartNfa_0(8, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
            long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(8, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, 0L, active1);
            return 10;
        }
        switch (curChar) {
        case 78:
            return jjMoveStringLiteralDfa11_0(active1, 0x400L);
        default:
            break;
        }
        return jjStartNfa_0(9, 0L, active1);
    }

    static private final int jjMoveStringLiteralDfa11_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(9, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, 0L, active1);
            return 11;
        }
        switch (curChar) {
        case 83:
            if ((active1 & 0x400L) != 0L)
                return jjStartNfaWithStates_0(11, 74, 28);
            break;
        default:
            break;
        }
        return jjStartNfa_0(10, 0L, active1);
    }

    static private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    static private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    static private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL,
            0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec3 = { 0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL,
            0x600000000000000L };
    static final long[] jjbitVec4 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
    static final long[] jjbitVec5 = { 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL };
    static final long[] jjbitVec6 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L };
    static final long[] jjbitVec7 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L };
    static final long[] jjbitVec8 = { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };

    static private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 48;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddStates(0, 6);
                        else if (curChar == 36)
                            jjCheckNAdd(28);
                        else if (curChar == 34)
                            jjCheckNAddStates(7, 9);
                        else if (curChar == 39)
                            jjAddStates(10, 11);
                        else if (curChar == 46)
                            jjCheckNAdd(4);
                        if ((0x3fe000000000000L & l) != 0L) {
                            if (kind > 11)
                                kind = 11;
                            jjCheckNAddTwoStates(1, 2);
                        } else if (curChar == 48) {
                            if (kind > 11)
                                kind = 11;
                            jjCheckNAddStates(12, 14);
                        }
                        break;
                    case 1:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 11)
                            kind = 11;
                        jjCheckNAddTwoStates(1, 2);
                        break;
                    case 3:
                        if (curChar == 46)
                            jjCheckNAdd(4);
                        break;
                    case 4:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjCheckNAddStates(15, 17);
                        break;
                    case 6:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(7);
                        break;
                    case 7:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjCheckNAddTwoStates(7, 8);
                        break;
                    case 9:
                        if (curChar == 39)
                            jjAddStates(10, 11);
                        break;
                    case 10:
                        if ((0xffffff7fffffdbffL & l) != 0L)
                            jjCheckNAdd(11);
                        break;
                    case 11:
                        if (curChar == 39 && kind > 17)
                            kind = 17;
                        break;
                    case 13:
                        if ((0x8400000000L & l) != 0L)
                            jjCheckNAdd(11);
                        break;
                    case 14:
                        if ((0xff000000000000L & l) != 0L)
                            jjCheckNAddTwoStates(15, 11);
                        break;
                    case 15:
                        if ((0xff000000000000L & l) != 0L)
                            jjCheckNAdd(11);
                        break;
                    case 16:
                        if ((0xf000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 17;
                        break;
                    case 17:
                        if ((0xff000000000000L & l) != 0L)
                            jjCheckNAdd(15);
                        break;
                    case 18:
                        if (curChar == 34)
                            jjCheckNAddStates(7, 9);
                        break;
                    case 19:
                        if ((0xfffffffbffffdbffL & l) != 0L)
                            jjCheckNAddStates(7, 9);
                        break;
                    case 21:
                        if ((0x8400000000L & l) != 0L)
                            jjCheckNAddStates(7, 9);
                        break;
                    case 22:
                        if (curChar == 34 && kind > 18)
                            kind = 18;
                        break;
                    case 23:
                        if ((0xff000000000000L & l) != 0L)
                            jjCheckNAddStates(18, 21);
                        break;
                    case 24:
                        if ((0xff000000000000L & l) != 0L)
                            jjCheckNAddStates(7, 9);
                        break;
                    case 25:
                        if ((0xf000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 26;
                        break;
                    case 26:
                        if ((0xff000000000000L & l) != 0L)
                            jjCheckNAdd(24);
                        break;
                    case 27:
                        if (curChar == 36)
                            jjCheckNAdd(28);
                        break;
                    case 28:
                        if ((0x3ff001000000000L & l) == 0L)
                            break;
                        if (kind > 109)
                            kind = 109;
                        jjCheckNAdd(28);
                        break;
                    case 29:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddStates(0, 6);
                        break;
                    case 30:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddTwoStates(30, 31);
                        break;
                    case 31:
                        if (curChar != 46)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjCheckNAddStates(22, 24);
                        break;
                    case 32:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjCheckNAddStates(22, 24);
                        break;
                    case 34:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(35);
                        break;
                    case 35:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjCheckNAddTwoStates(35, 8);
                        break;
                    case 36:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddTwoStates(36, 37);
                        break;
                    case 38:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(39);
                        break;
                    case 39:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjCheckNAddTwoStates(39, 8);
                        break;
                    case 40:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddStates(25, 27);
                        break;
                    case 42:
                        if ((0x280000000000L & l) != 0L)
                            jjCheckNAdd(43);
                        break;
                    case 43:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjCheckNAddTwoStates(43, 8);
                        break;
                    case 44:
                        if (curChar != 48)
                            break;
                        if (kind > 11)
                            kind = 11;
                        jjCheckNAddStates(12, 14);
                        break;
                    case 46:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 11)
                            kind = 11;
                        jjCheckNAddTwoStates(46, 2);
                        break;
                    case 47:
                        if ((0xff000000000000L & l) == 0L)
                            break;
                        if (kind > 11)
                            kind = 11;
                        jjCheckNAddTwoStates(47, 2);
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x7fffffe87fffffeL & l) != 0L)
                            jjCheckNAdd(28);
                        break;
                    case 2:
                        if ((0x100000001000L & l) != 0L && kind > 11)
                            kind = 11;
                        break;
                    case 5:
                        if ((0x2000000020L & l) != 0L)
                            jjAddStates(28, 29);
                        break;
                    case 8:
                        if ((0x5000000050L & l) != 0L && kind > 15)
                            kind = 15;
                        break;
                    case 10:
                        if ((0xffffffffefffffffL & l) != 0L)
                            jjCheckNAdd(11);
                        break;
                    case 12:
                        if (curChar == 92)
                            jjAddStates(30, 32);
                        break;
                    case 13:
                        if ((0x14404410000000L & l) != 0L)
                            jjCheckNAdd(11);
                        break;
                    case 19:
                        if ((0xffffffffefffffffL & l) != 0L)
                            jjCheckNAddStates(7, 9);
                        break;
                    case 20:
                        if (curChar == 92)
                            jjAddStates(33, 35);
                        break;
                    case 21:
                        if ((0x14404410000000L & l) != 0L)
                            jjCheckNAddStates(7, 9);
                        break;
                    case 28:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 109)
                            kind = 109;
                        jjCheckNAdd(28);
                        break;
                    case 33:
                        if ((0x2000000020L & l) != 0L)
                            jjAddStates(36, 37);
                        break;
                    case 37:
                        if ((0x2000000020L & l) != 0L)
                            jjAddStates(38, 39);
                        break;
                    case 41:
                        if ((0x2000000020L & l) != 0L)
                            jjAddStates(40, 41);
                        break;
                    case 45:
                        if ((0x100000001000000L & l) != 0L)
                            jjCheckNAdd(46);
                        break;
                    case 46:
                        if ((0x7e0000007eL & l) == 0L)
                            break;
                        if (kind > 11)
                            kind = 11;
                        jjCheckNAddTwoStates(46, 2);
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                            jjCheckNAdd(28);
                        break;
                    case 10:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            jjstateSet[jjnewStateCnt++] = 11;
                        break;
                    case 19:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            jjAddStates(7, 9);
                        break;
                    case 28:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 109)
                            kind = 109;
                        jjCheckNAdd(28);
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static private final int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
        case 42:
            return jjMoveStringLiteralDfa1_2(0x200L);
        default:
            return 1;
        }
    }

    static private final int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
        case 47:
            if ((active0 & 0x200L) != 0L)
                return jjStopAtPos(1, 9);
            break;
        default:
            return 2;
        }
        return 2;
    }

    static private final int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    static private final int jjMoveNfa_1(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x2400L & l) != 0L) {
                            if (kind > 8)
                                kind = 8;
                        }
                        if (curChar == 13)
                            jjstateSet[jjnewStateCnt++] = 1;
                        break;
                    case 1:
                        if (curChar == 10 && kind > 8)
                            kind = 8;
                        break;
                    case 2:
                        if (curChar == 13)
                            jjstateSet[jjnewStateCnt++] = 1;
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = { 30, 31, 36, 37, 40, 41, 8, 19, 20, 22, 10, 12, 45, 47, 2,
            4, 5, 8, 19, 20, 24, 22, 32, 33, 8, 40, 41, 8, 6, 7, 13, 14, 16, 21, 23, 25, 34, 35,
            38, 39, 42, 43, };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec2[i2] & l2) != 0L);
        default:
            if ((jjbitVec0[i1] & l1) != 0L)
                return true;
            return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec4[i2] & l2) != 0L);
        case 48:
            return ((jjbitVec5[i2] & l2) != 0L);
        case 49:
            return ((jjbitVec6[i2] & l2) != 0L);
        case 51:
            return ((jjbitVec7[i2] & l2) != 0L);
        case 61:
            return ((jjbitVec8[i2] & l2) != 0L);
        default:
            if ((jjbitVec3[i1] & l1) != 0L)
                return true;
            return false;
        }
    }

    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            "\101\124\124\122", "\102\117\117\114\105\101\116", "\103\104\117\115",
            "\103\117\116\104", "\103\117\116\116", "\106\125\116\103\124\111\117\116",
            "\107\105\124", "\107\122\117\125\120", "\111\104\117\115",
            "\111\116\124\105\107\105\122", "\116\105\127", "\120\114\125\107\111\116",
            "\123\105\124", "\123\124\122\111\116\107", "\124\105\115\120\114",
            "\125\123\105\122\103\117\116\116", "\101\104\104", "\101\116\104", "\102\117\124\110",
            "\102\131", "\103\110\111\114\104", "\103\114\105\101\122",
            "\103\117\115\120\125\124\105", "\103\117\116\124\101\111\116\123",
            "\104\105\106\101\125\114\124", "\104\111\107\111\124", "\104\111\123\120\114\101\131",
            "\104\111\126\111\104\105", "\104\117\115", "\104\121\125\117\124\105",
            "\104\125\120\114\111\103\101\124\105\104", "\105\111\124\110\105\122",
            "\105\114\105\115\105\116\124", "\105\114\123\105", "\105\116",
            "\105\116\101\102\114\105\104", "\105\130\124\105\122\116", "\106\101\114\123\105",
            "\106\111\114\105", "\106\117\122\105\101\103\110", "\106\122", "\106\122\117\115",
            "\111\106", "\111\106\117\116\105\103\110\111\114\104", "\111\115\120\117\122\124",
            "\111\116", "\111\116\123\124\101\116\103\105\117\106", "\114\105\116\107\124\110",
            "\114\105\124\124\105\122", "\114\111\123\124", "\114\117\127\105\122",
            "\115\125\114\124\111\120\114\131", "\116\117\124", "\116\125\114\114",
            "\116\117\103\101\123\105", "\117\116\114\131\103\117\116\124\101\111\116\123",
            "\117\122", "\117\122\104\105\122", "\120\101\122\115", "\120\105\122",
            "\120\122\105\106", "\120\122\105\106\61", "\121\125\117\124\105", "\122\125\114\105",
            "\123\105\120", "\123\124\101\122\124\123\127\111\124\110",
            "\123\125\102\123\124\122\101\103\124", "\123\125\106", "\123\125\106\61", "\124\117",
            "\124\117\102\117\117\114\105\101\116", "\124\117\106\114\117\101\124",
            "\124\117\111\116\124\105\107\105\122", "\124\117\123\124\122\111\116\107",
            "\124\122\125\105", "\125\116\104\105\122\123\103\117\122\105",
            "\125\116\111\121\125\105", "\125\120\120\105\122", "\126\101\122\111\101\102\114\105",
            "\127\110\105\116", "\126\101\122\60", "\126\101\122\61", "\126\101\122\62",
            "\126\101\122\63", "\126\101\122\64", "\126\101\122\65", "\126\101\122\66",
            "\126\101\122\67", "\126\101\122\70", "\126\101\122\71", null, null, null, "\75",
            "\73", "\50", "\54", "\51", "\53", "\55", "\52", "\57", "\76", "\74", "\75\75", };
    public static final String[] lexStateNames = { "DEFAULT", "IN_SINGLE_LINE_COMMENT",
            "IN_MULTI_LINE_COMMENT", };
    public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = { 0xfffffffffffe8801L, 0xfff3fffffffffffL, };
    static final long[] jjtoSkip = { 0x33eL, 0x0L, };
    static final long[] jjtoSpecial = { 0x300L, 0x0L, };
    static final long[] jjtoMore = { 0x4c0L, 0x0L, };
    static protected JavaCharStream input_stream;
    static private final int[] jjrounds = new int[48];
    static private final int[] jjstateSet = new int[96];
    static StringBuffer image;
    static int jjimageLen;
    static int lengthOfMatch;
    static protected char curChar;

    public TemplateParserTokenManager(JavaCharStream stream) {
        if (input_stream != null)
            throw new TokenMgrError(
                    "ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
                    TokenMgrError.STATIC_LEXER_ERROR);
        input_stream = stream;
    }

    public TemplateParserTokenManager(JavaCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    static public void ReInit(JavaCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 48; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    static public void ReInit(JavaCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    static public void SwitchTo(int lexState) {
        if (lexState >= 3 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState
                    + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    static protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    public static Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = null;
            jjimageLen = 0;

            for (;;) {
                switch (curLexState) {
                case 0:
                    try {
                        input_stream.backup(0);
                        while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
                            curChar = input_stream.BeginToken();
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    if (jjmatchedPos == 0 && jjmatchedKind > 10) {
                        jjmatchedKind = 10;
                    }
                    break;
                case 2:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_2();
                    if (jjmatchedPos == 0 && jjmatchedKind > 10) {
                        jjmatchedKind = 10;
                    }
                    break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null)
                                specialToken = matchedToken;
                            else {
                                matchedToken.specialToken = specialToken;
                                specialToken = (specialToken.next = matchedToken);
                            }
                            SkipLexicalActions(matchedToken);
                        } else
                            SkipLexicalActions(null);
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    jjimageLen += jjmatchedPos + 1;
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column,
                        error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    static void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
        default:
            break;
        }
    }
}
