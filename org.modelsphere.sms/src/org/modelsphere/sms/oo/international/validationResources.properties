/*************************************************************************

Copyright (C) 2009 Grandite

This file is part of Open ModelSphere.

Open ModelSphere is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
or see http://www.gnu.org/licenses/.

You can redistribute and/or modify this particular file even under the
terms of the GNU Lesser General Public License (LGPL) as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

You should have received a copy of the GNU Lesser General Public License 
(LGPL) along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
or see http://www.gnu.org/licenses/.

You can reach Grandite at: 

20-1220 Lebourgneuf Blvd.
Quebec, QC
Canada  G2K 2G4

or

open-modelsphere@grandite.com

**********************************************************************/

AbstractMethod0CantBody=abstract method {0} cannot have body: the method of an interface is implicitly abstract.<br>
Abstract0Method1CantBody={0} method {1} cannot have body: the {0} method cannot provide an implementation.<br>
Adt0CannotSameNameAsEnclosingClass1Encladt2={0} cannot have the same name as its enclosing {1} {2}.<br>
AdtErrorTitle=<br><font color=\"#ff0000\">{0} {1}</font><br>
ACyclicInheritanceInvolvingXxx0_Xxx1_Xxx2=cyclic inheritance involving {0} {1}: a {2}
AnCyclicInheritanceInvolvingXxx0_Xxx1_Xxx2=cyclic inheritance involving {0} {1}: an {2}
AllConstrSuperclassXxx0HaveThrows=. All constructors of superclass {0} have a throws clause.<br>
AMethod0OfInterfaceIsPublic=&nbsp a {0} of an interface is implicitly public.<br>
AnMethod0OfInterfaceIsPublic=&nbsp an {0} of an interface is implicitly public.<br>
AXxx0DupCompilNamesXxx1_Xxx2={0} duplicate compilation unit names {1}: a {2}
AnXxx0DupCompilNamesXxx1_Xxx2={0} duplicate compilation unit names {1}: an {2}
AXxx0DupCompilNameXxx1_Xxx2={0} duplicate compilation unit name {1}: a {2}
AnXxx0DupCompilNameXxx1_Xxx2={0} duplicate compilation unit name {1}: an {2}
AXxx0DupFNamesXxx1_Xxx2={0} duplicate field names {1}: a {2}
AnXxx0DupFNamesXxx1_Xxx2={0} duplicate field names {1}: an {2}
AXxx0DupFNameXxx1_Xxx2={0} duplicate field name {1}: a {2}
AnXxx0DupFNameXxx1_Xxx2={0} duplicate field name {1}: an {2}
AXxx0DupCINamesXxx1_Xxx2={0} duplicate classifier names {1}: a {2}
AnXxx0DupCINamesXxx1_Xxx2={0} duplicate classifier names {1}: an {2}
AXxx0DupCINameXxx1_Xxx2={0} duplicate classifier name {1}: a {2}
AnXxx0DupCINameXxx1_Xxx2={0} duplicate classifier name {1}: an {2}
AXxx0DupMethods1SigXxx2_Xxx3={0} duplicate {1} signatures {2}: a {3}
AnXxx0DupMethods1SigXxx2_Xxx3={0} duplicate {1} signatures {2}: an {3}
AXxx0DupMethod1SigXxx2_Xxx3={0} duplicate {1} signature {2}: a {3}
AnXxx0DupMethod1SigXxx2_Xxx3={0} duplicate {1} signature {2}: an {3}
AtSameLevel =&nbsp at the same level
CannotExtendClassXxx0=it cannot extend class {0}: class {1} is declared final and cannot have subclasses.<br>
CannotBeAllTogetherSuperclasses=&nbsp cannot be all together direct superclasses.<br>
CannotImplement0DirectlyInterfaceXxx1MoreOneTime=it cannot {0} directly the interface {1} more than one time.<br>
CannotInheritClassXxx0=it cannot inherit from the class {0}: an interface can inherit from interfaces only.<br>
CannotInheritFromClass0Xxx1VisErr2=it cannot inherit from {0} {1}. {2}<br>
CannotInheritFromInnerClassXxx0=&nbsp cannot inherit from one of its inner {0}.<br>
CannotInheritFromNestedAdtXxx0=&nbsp cannot inherit from one of its nested {0}.<br>
CannotInheritMoreOneSuperclass=it cannot inherit from more than one direct superclass at a time:&nbsp
CannotHaveTwoFieldsSameName=&nbsp cannot have two or more fields with the same name.<br>
CannotHaveTwoMemberCISameName=&nbsp cannot have two or more member classes/interfaces with the same name.<br>
CannotHaveTwoMethod0sSameSignature=&nbsp cannot have two or more {0}s with the same signature.<br>
CannotSameNameClassInSameContainer0=&nbsp cannot have the same name as any other class or interface declared in the same {0}.<br>
CannotSameNameCompilInSameContainer0=&nbsp cannot have a compilation unit with the same name as any other compilation unit declared in the same {0}.<br>
CantHide0MethodXxx1Xxx2InXxx3Xxx4DifferentRettype=&nbsp cannot {0} method {1} {2} in {3} {4} with different return type.<br>
CantXxx0Xxx1Method2InXxx3Xxx4WeakerPrivilege5=&nbsp cannot {0} <i>{1}</i> method {2} in {3} {4} with weaker access privilege{5}
Class0CannotBeVis1={0} cannot be declared {1}:
Class0Encladt1CannotBeAccessed={0} <i>{1}</i> cannot be accessed:
ClassCannotBeFinalAbstract=class cannot be declared final and abstract: a final class cannot be subclassed.<br>
ClassCantBeNotAbstractAndNotImplementAbstractMethod0InXxx1Xxx2=concrete class must implement the abstract method {0} in {1} {2}.<br>
ClassCantNotAbstractContainsAbstracMethod0=concrete class contains abstract method {0}: the declaration of abstract methods only occurs within abstract classes.<br>
ClassesInterfacesCircularity=<font color=\"#ff0000\">Classes/Interfaces Circularity:</font><br>
Constr0InvalidName=constructor {0} has an invalid name: the constructor name must be the simple name of the class.<br>
CyclicInheritanceByThePath=cyclic inheritance by the path&nbsp
DbObjectHyperLink=<a href=\"{0}:{1}\">{2}</a>
DupParamXxx0InMethod1Xxx2Xxx1=duplicate parameter name {0} in {1} {2}: a {1} cannot have two formal parameters with the same name.<br>
DotReturn=.<br>
EnclosingClass0Encladt1=&nbsp enclosing {0} <i>{1}</i>
ErrorNbr0=<b>&nbsp ** Error ({0}) - </b>
Extend=extend
FieldXxx0CantNoType=field {0} cannot have an unspecified type.<br>
FieldXxx0CantXxx1Xxx2AsTypeVis3=field {0} cannot have {1} {2} as type. {3}<br>
FieldXxx0CantFinalVolatile=field {0} cannot be declared final and volatile.<br>
FieldXxx0CantVis1_InterfaceFieldImplicitlyPublic=field {0} cannot be declared {1}: a field of an interface is implicitly public.<br>
FieldXxx0CantTransient_InterfaceFieldImplicitlyStatic=field {0} cannot be declared transient: a field of an interface is implicitly static.<br>
FieldXxx0CantVolatile_InterfaceFieldImplicitlyFinal=field {0} cannot be declared volatile: a field of an interface is implicitly final.<br>
Hide=hide
Hidden=hidden
Implement=implement
InheritedFromMethod0Xxx1=&nbsp (inherited from {0} {1})&nbsp
InPackageXxx0=&nbsp in package {0}
InProjetXxx0=&nbsp in project {0}
InvalidConstDecls=invalid constructor declarations:&nbsp
InvalidConstDecl=invalid constructor declaration:&nbsp
InterfaceCantHaveConstr=. An interface cannot have constructor declarations.<br>
InterfaceMethodIsPublic=: an interface method is implicitly public.<br>
It=&nbsp it
JavaErrors=<h1><Java Error(s)<br></h1>
JavaValidation=Java Validation
Method0Cant1=method {0} cannot be declared {1}: a method of an interface is implicitly public.<br>
Method0CantFinal=method {0} cannot be declared final: a method of an interface is implicitly abstract.<br>
Method0CantFinalAbstract=method {0} cannot be declared final and abstract: a final method cannot be overridden.<br>
Method0CantHaveXxx1Xxx2ReturnType_Xxx3=method {0} cannot have {1} {2} as return type. {3}<br>
Method0CantNative=method {0} cannot be declared native: a method of an interface is implicitly abstract.<br>
Method0CantNatAbstract=method {0} cannot be declared native and abstract: a native keyword describes an implementation property.<br>
Method0CantPrivateAbstract=method {0} cannot be declared private and abstract: a private method cannot be overridden.<br>
Method0CantStatic=method {0} cannot be declared static: a method of an interface is implicitly abstract.<br>
Method0CantStatAbstract=method {0} cannot be declared static and abstract: a static method cannot be overridden.<br>
Method0CantSynchronized=method {0} cannot be declared synchronized: a method of an interface is implicitly abstract.<br>
Method0CantSyncAbstract=method {0} cannot be declared synchronized and abstract: a synchronized keyword describes an implementation property.<br>
Method0Xxx1CantStatic_InnerCantStaticMembers={0}{1} cannot be declared static: an inner class cannot have static members.<br>
Method0Xxx1CantXxx2FinalMethodXxx3InClass4_CantBe5=method {0}{1} cannot {2} final method {3} in class {4}: a final method of a class cannot be {5}.<br>
Method0Yyy1CantXxx2Xxx3InXxx4Xxx5_Xxx6MethodNotThrowExc7=&nbsp method {0}{1} cannot {2} {3} in {4} {5}: {6} method does not throw exception {7} or one of its superclasses.<br>
methodRettype0Xxx1=method {0} {1}
ModelClosed=The object cannot be found because the model referenced by this link has been closed.
MustBePublic_Class0CannotBeVis1=&nbsp {0} cannot be declared {1}: it can be only declared public or package (default access).<br>
Name=name
Names=names
Native0Method1CantBody={0} method {1} cannot have body: a {0} method cannot provide an implementation.<br>
NestedTopClass0CannotBeInInnerXxx1=nested top-level {0} cannot be declared within inner class {1}: it can only be nested within other top-level class or interface.<br>
Nb0DupAttr1NameAttr1={0} duplicate {1} name: an {1}
Nb0DupAttr1NamesAttr1={0} duplicate {1} names: an {1}
Nb0DupClas1NameClas1={0} duplicate {1} name: a {1}
Nb0DupClas1NamesClas1={0} duplicate {1} names: a {1}
NoJavaErrors=<br>&nbsp&nbsp&nbsp <b>No Java Errors</b><br>
NotPossibleProvideConstructor_Superclass0NoConstr1WithoutNoParam=not possible to provide a default constructor: superclass {0} does not have a constructor {1}() without no parameters.<br>
NotStaticMethod0Xxx1CantOverrideStaticMethod2InXxx3=non static method {0}{1} cannot override static method {2} in class {3}: an instance method cannot override a static method.<br>
ObjectNotFoundInDb=Object not found. It must have been deleted or closed
OperationXxx0_Xxx1CantThrowsXxx2_Xxx2Exception_Xxx3={0} {1} cannot throw {2} {3}. {4}<br>
Override=override
Overridden=overridden
PathEnum=&nbsp -
Return=<br>
S2ParamXxx0InClass1Xxx2CantXxx3Xxx4Type=parameter {0} in {1} {2} cannot have {3} {4} as type. {5}<br>
StaticMethod0Xxx1CantHideNotStaticMethod2InXxx3Xxx4=static method {0}{1} cannot hide not static method {2} in {3} {4}: a static method cannot hide an instance method.<br>
Package0Class1CannotBeStatic={0} {1} cannot be declared static: only a nested classifier can be declared static.<br>
PackageVisible=package-visible
ParamXxx0InClass1Xxx2CantNoType=parameter {0} in {1} {2} cannot have an unspecified type.<br>
UnrepExInConstrs=unreported exception in constructor declarations:&nbsp
UnrepExInConstr=unreported exception in constructor declaration:&nbsp
Visibility0Method1=<i>{0}</i> method {1}
Void=<i>void</i>
Xxx0Xxx1IsDeclaredVis2Where3={0}{1} is declared {2} {3}.

