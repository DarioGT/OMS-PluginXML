/*************************************************************************

Copyright (C) 2008 Grandite

This file is part of Open ModelSphere.

Open ModelSphere is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
or see http://www.gnu.org/licenses/.

You can reach Grandite at: 

20-1220 Lebourgneuf Blvd.
Quebec, QC
Canada  G2K 2G4

or

open-modelsphere@grandite.com

 **********************************************************************/

package org.modelsphere.sms;

import org.modelsphere.jack.actions.AbstractApplicationAction;
import org.modelsphere.jack.srtool.DefaultMainFrame;
import org.modelsphere.sms.actions.ActionFactory;
import org.modelsphere.sms.actions.SMSActionsStore;

/**
 * This class is used for initialisation purposes It allows us to group under separate packages
 * different semantical parts of the application (OR, OO, ...) This way, it is clearer to manage db,
 * popup, diagrams, actions, toolbars, ...
 */

public abstract class Module {
    // First to be called when application is created
    public void initModule() {
    }

    // Force loading of the meta classes - call ApplClasses.getFinalClasses()
    // from your db package
    // ApplClasses is generated by GenMeta in xxx.db package;
    // the method "getFinalClasses()" is used to ensure that all classes of the
    // meta are loaded.
    public abstract void loadMeta();

    // Called in application.initMeta()
    public void initMeta() {
    }

    // Called after repository creation
    public void initIntegrity() {
    }

    // Add the actions to the application Actions Store
    public final void initActions() {
        ActionFactory factory = getActionFactory();
        if (factory != null)
            factory.registerActions(SMSActionsStore.getSingleton());
    }

    // Return the action factory that will create the actions for this module
    protected ActionFactory getActionFactory() {
        return null;
    }

    // create each toolkit supported by the module
    // Only create the instance: new ABCToolkit();
    public void initToolkits() {
    }

    // Create and Add the other toolbars to the DefaultMainFrame
    public void initAndInstallOtherToolBars(DefaultMainFrame frame) {
    }

    // Installation will be postponed on the event queue (after all
    // initinialisations are completed)
    public void installListeners() {
    }

    // Return the mapping between a class and an array of string containing
    // the available actions key for the class
    // {class1, array of action key, class2, array of action key, ...}
    public Object[] getPopupMenuMapping() {
        return new Object[] {};
    }

    public AbstractApplicationAction[] getModifierActions() {
        return null;
    }

}
